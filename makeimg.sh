#!/bin/bash

# Makes the image from the rootfs and boot partitions generated by build.sh 
# See https://kevinboone.me/pi-boot-sd.html

. ./CONFIG.sh
. ./BUILDCONFIG.sh

LOOP=/dev/loop0
MOUNT=/tmp/mnt

# Note: it is not an error for these umounts to fail
umount ${LOOP}p1 >& /dev/null
umount ${LOOP}p2 >& /dev/null
umount ${MOUNT} >& /dev/null

rm -f $IMG
echo "Creating empty disk image"
dd if=/dev/zero of=$IMG bs=128M count=16

losetup -D
sync
losetup -fP $IMG

echo "Partitioning the disk image"
fdisk $LOOP << EOF
o
n
p
1

+256m
t
c
n
p
2



w
q
EOF

sync

mkdir -p $MOUNT

echo "Making filesystems"
mkfs.vfat ${LOOP}p1
mkfs.ext4 -F ${LOOP}p2

mount -o loop ${LOOP}p1 $MOUNT

echo "Copying boot partition"

cp -r ${BOOT}/* $MOUNT/
cp bootfiles/* $MOUNT

echo "Unmounting " ${LOOP}p1
umount ${LOOP}p1 >& /dev/null
umount ${MOUNT} >& /dev/null

mount -o loop ${LOOP}p2 $MOUNT

echo "Copying root filesystem"

cp -aux ${ROOTFS}/* $MOUNT/
chown -R root:root $MOUNT/*

echo "Setting root filesystem permissions"

chmod ug+s /$MOUNT/usr/bin/sudo
chmod ug+s /$MOUNT/bin/ping
chmod ug+s /$MOUNT/usr/bin/passwd
chmod ug+s /$MOUNT/bin/su
chmod ug+s /$MOUNT/bin/login
if [[ $INSTALL_X == 1 ]]; then
  chmod ug+s /$MOUNT/usr/bin/Xorg
fi

umount ${LOOP}p1 >& /dev/null
umount ${MOUNT} >& /dev/null

echo "Now use, e.g., dd to copy $IMG to the SD card device"

losetup -D

